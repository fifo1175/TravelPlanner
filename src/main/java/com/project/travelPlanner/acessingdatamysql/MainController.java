package com.project.travelPlanner.acessingdatamysql;

import com.project.travelPlanner.acessingdatamysql.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping("/index")    // show all users from model?
    public String showUserList(Model model) {
        model.addAttribute("users", userRepository.findAll());
        return "index";
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @PostMapping("/adduser")
    public String addUser(User user, BindingResult result, Model model) {
        if(result.hasFieldErrors()) {
            return "addUser";
        }

        userRepository.save(user);
        return "redirect:/index";
    }

    @GetMapping(path="/all")       // show all users
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with ALL the users
        return userRepository.findAll();
    }

    @GetMapping("/signup")
    public String showSignUpForm(User user) {
        return "addUser";
    }

    @GetMapping("/edit/{id}")
    public String showUpdateForm(@PathVariable("id") Integer id, Model model) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid user ID:" + id));

        model.addAttribute("user", user);
        return "updateUser";
    }

    @PostMapping("/update/{id}")
    public String updateUser(@PathVariable("id") Integer id, User user, BindingResult result, Model model) {
        if (result.hasErrors()) {
            user.setID(id);
            return "updateUser";
        }

        userRepository.save(user);
        return "redirect:/index";
    }

    @GetMapping("/delete/{id}")
    public String deleteUser(@PathVariable("id") Integer id, Model model) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid user ID:" + id));
        userRepository.delete(user);
        return "redirect:/index";
    }


}
